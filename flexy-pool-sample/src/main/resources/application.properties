server.port=8081

spring.application.name=flexy-pool-sample
spring.sleuth.sampler.percentage=1
spring.datasource.type=com.zaxxer.hikari.HikariDataSource
spring.datasource.initialize=false
spring.datasource.hikari.jdbc-url=jdbc:h2:mem:test-${random.int};DB_CLOSE_DELAY=-1
spring.datasource.hikari.username=sa
spring.datasource.hikari.password=
spring.datasource.hikari.maximum-pool-size=10
spring.zipkin.enabled=false

###flexy-pool配置
# Retries on getting connection
decorator.datasource.flexy-pool.acquiring-strategy.retry.attempts=2
# Increments pool size if connection acquire request has timed out
decorator.datasource.flexy-pool.acquiring-strategy.increment-pool.max-overflow-pool-size=15
decorator.datasource.flexy-pool.acquiring-strategy.increment-pool.timeout-millis=500
# Enable metrics exporting to the JMX
decorator.datasource.flexy-pool.metrics.reporter.jmx.enabled=true
decorator.datasource.flexy-pool.metrics.reporter.jmx.auto-start=false
# Millis between two consecutive log reports
decorator.datasource.flexy-pool.metrics.reporter.log.millis=300000
# Enable logging and publishing ConnectionAcquireTimeThresholdExceededEvent when a connection acquire request has timed out
decorator.datasource.flexy-pool.threshold.connection.acquire=50
# Enable logging and publishing ConnectionLeaseTimeThresholdExceededEvent when a connection lease has exceeded the given time threshold
decorator.datasource.flexy-pool.threshold.connection.lease=1000
